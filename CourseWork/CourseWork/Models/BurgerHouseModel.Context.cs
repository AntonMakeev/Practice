//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourseWork.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BurgerHouseDBEntities : DbContext
    {
        public BurgerHouseDBEntities()
            : base("name=BurgerHouseDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cheque> Cheques { get; set; }
        public virtual DbSet<ChequeTabPart> ChequeTabParts { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientAuthorizationData> ClientAuthorizationDatas { get; set; }
        public virtual DbSet<Dish> Dishes { get; set; }
        public virtual DbSet<DishType> DishTypes { get; set; }
        public virtual DbSet<Ingredient> Ingredients { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceTabPart> InvoiceTabParts { get; set; }
        public virtual DbSet<OrderStatu> OrderStatus { get; set; }
        public virtual DbSet<Price> Prices { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<ReceiptTabPart> ReceiptTabParts { get; set; }
        public virtual DbSet<Suplier> Supliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UnitOfMeasurement> UnitOfMeasurements { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
        public virtual DbSet<WorkerAuthorizationData> WorkerAuthorizationDatas { get; set; }
        public virtual DbSet<WorkerPosition> WorkerPositions { get; set; }
        public virtual DbSet<AllOrder> AllOrders { get; set; }
        public virtual DbSet<getCountOfTypeDish> getCountOfTypeDishes { get; set; }
        public virtual DbSet<TableInfo> TableInfoes { get; set; }
        public virtual DbSet<InfoOrderWhereID> InfoOrderWhereIDs { get; set; }
        public virtual DbSet<DishesView> DishesViews { get; set; }
    
        [DbFunction("BurgerHouseDBEntities", "getClientByID")]
        public virtual IQueryable<getClientByID_Result> getClientByID(Nullable<int> clientid)
        {
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getClientByID_Result>("[BurgerHouseDBEntities].[getClientByID](@clientid)", clientidParameter);
        }
    
        [DbFunction("BurgerHouseDBEntities", "getProductsInOrder")]
        public virtual IQueryable<getProductsInOrder_Result> getProductsInOrder(Nullable<int> orderid)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getProductsInOrder_Result>("[BurgerHouseDBEntities].[getProductsInOrder](@orderid)", orderidParameter);
        }
    
        [DbFunction("BurgerHouseDBEntities", "getUsersOrders")]
        public virtual IQueryable<getUsersOrders_Result> getUsersOrders(Nullable<int> clientid)
        {
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getUsersOrders_Result>("[BurgerHouseDBEntities].[getUsersOrders](@clientid)", clientidParameter);
        }
    
        public virtual int AddClient(string surname, string name, string patronymic, string email, string login, string password)
        {
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var patronymicParameter = patronymic != null ?
                new ObjectParameter("patronymic", patronymic) :
                new ObjectParameter("patronymic", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClient", surnameParameter, nameParameter, patronymicParameter, emailParameter, loginParameter, passwordParameter);
        }
    
        public virtual int AddDish(string dishname, byte[] dishphoto, Nullable<int> dishtype, Nullable<int> unitofmeas, Nullable<decimal> price)
        {
            var dishnameParameter = dishname != null ?
                new ObjectParameter("dishname", dishname) :
                new ObjectParameter("dishname", typeof(string));
    
            var dishphotoParameter = dishphoto != null ?
                new ObjectParameter("dishphoto", dishphoto) :
                new ObjectParameter("dishphoto", typeof(byte[]));
    
            var dishtypeParameter = dishtype.HasValue ?
                new ObjectParameter("dishtype", dishtype) :
                new ObjectParameter("dishtype", typeof(int));
    
            var unitofmeasParameter = unitofmeas.HasValue ?
                new ObjectParameter("unitofmeas", unitofmeas) :
                new ObjectParameter("unitofmeas", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDish", dishnameParameter, dishphotoParameter, dishtypeParameter, unitofmeasParameter, priceParameter);
        }
    
        public virtual int AddOrder(Nullable<int> client, string verifingcode)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("client", client) :
                new ObjectParameter("client", typeof(int));
    
            var verifingcodeParameter = verifingcode != null ?
                new ObjectParameter("verifingcode", verifingcode) :
                new ObjectParameter("verifingcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrder", clientParameter, verifingcodeParameter);
        }
    
        public virtual int AddOrderOffline(Nullable<int> workerid, Nullable<int> statusid)
        {
            var workeridParameter = workerid.HasValue ?
                new ObjectParameter("workerid", workerid) :
                new ObjectParameter("workerid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrderOffline", workeridParameter, statusidParameter);
        }
    
        public virtual int AddProductInOrder(Nullable<int> orderid, Nullable<int> productid, Nullable<int> count)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProductInOrder", orderidParameter, productidParameter, countParameter);
        }
    
        public virtual int AddRowInReceipt(Nullable<int> receiptid, Nullable<int> count, Nullable<int> ingredient)
        {
            var receiptidParameter = receiptid.HasValue ?
                new ObjectParameter("receiptid", receiptid) :
                new ObjectParameter("receiptid", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var ingredientParameter = ingredient.HasValue ?
                new ObjectParameter("ingredient", ingredient) :
                new ObjectParameter("ingredient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRowInReceipt", receiptidParameter, countParameter, ingredientParameter);
        }
    
        public virtual int EditClient(string surname, string name, string patronymic, string email, string login, string password, Nullable<int> clientid)
        {
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var patronymicParameter = patronymic != null ?
                new ObjectParameter("patronymic", patronymic) :
                new ObjectParameter("patronymic", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditClient", surnameParameter, nameParameter, patronymicParameter, emailParameter, loginParameter, passwordParameter, clientidParameter);
        }
    
        public virtual int EditOrder(Nullable<int> orderstatus, Nullable<int> orderid, Nullable<int> workerid)
        {
            var orderstatusParameter = orderstatus.HasValue ?
                new ObjectParameter("orderstatus", orderstatus) :
                new ObjectParameter("orderstatus", typeof(int));
    
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var workeridParameter = workerid.HasValue ?
                new ObjectParameter("workerid", workerid) :
                new ObjectParameter("workerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditOrder", orderstatusParameter, orderidParameter, workeridParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int CalculateTotalAndUpdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateTotalAndUpdate");
        }
    
        public virtual int AddInOrderOffline(Nullable<int> workerid, Nullable<int> statusid)
        {
            var workeridParameter = workerid.HasValue ?
                new ObjectParameter("workerid", workerid) :
                new ObjectParameter("workerid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInOrderOffline", workeridParameter, statusidParameter);
        }
    
        public virtual int usp_DeleteFieldById(Nullable<int> dishId)
        {
            var dishIdParameter = dishId.HasValue ?
                new ObjectParameter("DishId", dishId) :
                new ObjectParameter("DishId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteFieldById", dishIdParameter);
        }
    }
}
